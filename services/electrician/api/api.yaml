openapi: 3.0.0
info:
  title: api
  version: '1.0'
  description: ''
servers:
  - url: 'http://localhost:3000'
tags:
  - name: quotation
  - name: project
paths:
  /rfq:
    post:
      summary: ''
      tags:
        - quotation
      operationId: registerRequestForQuotation
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rfq:
                  $ref: '#/components/schemas/Rfq'
                callbackUrl:
                  type: string
                  format: uri
              required:
                - rfq
                - callbackUrl
      callbacks:
        rfqEvaluated:
          '{$request.body#/callbackUrl}':
            put:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Quotation'
              responses:
                '200':
                  description: OK
                '400':
                  description: Bad Request
                '404':
                  description: Not Found
                '500':
                  description: Internal Server Error
  '/rfq/{rfqNumber}':
    delete:
      summary: ''
      parameters:
        - schema:
            type: string
          name: rfqNumber
          in: path
          required: true
      operationId: deleteRequestForQuotation
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
      tags:
        - quotation
  /projects:
    post:
      summary: ''
      tags:
        - project
      operationId: registerProject
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'          
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
  '/projects/{projectId}/status':
    put:
      summary: ''
      parameters:
        - schema:
            type: string
          name: projectId
          in: path
          required: true
      tags:
        - project
      operationId: updateProjectStatus
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectStatus'
  '/projects/{projectId}/planProposals':
    post:
      summary: ''
      parameters:
        - schema:
            type: string
          name: projectId
          in: path
          required: true
      tags:
        - project
      operationId: registerPlanProposal
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackUrl:
                  type: string
                  format: uri
                planProposal:
                  $ref: '#/components/schemas/PlanProposal'
      callbacks:
        planProposalEvaluated:
          '{$request.body#/callbackUrl}':
            put:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        status:
                          $ref: '#/components/schemas/PlanProposalStatus'
                        links:
                          type: object
                          properties:
                            planProposals:
                              type: string
                              format: uri
                            jobs:
                              type: string
                              format: uri
              responses:
                '200':
                  description: OK
                '400':
                  description: Bad Request
                '404':
                  description: Not Found
                '500':
                  description: Internal Server Error
  '/projects/{projectId}/jobs':
    get:
      summary: ''
      parameters:
        - schema:
            type: string
          name: projectId
          in: path
          required: true
        - schema:
            type: string
            format: date
          name: date
          in: query
      tags:
        - project
      operationId: getJobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  links:
                    type: object
                    required:
                      - projectStatus
                    properties:
                      projectStatus:
                        type: string
                        format: uri
                    readOnly: true
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
components:
  schemas:
    Rfq:
      title: Rfq
      type: object
      properties:
        rfqNumber:
          type: string
        customerContact:
          $ref: '#/components/schemas/ContactInformation'
        renovationCompanyContact:
          $ref: '#/components/schemas/ContactInformation'
        site:
          $ref: '#/components/schemas/Site'
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/QuotationItem'
        estimatedStartDate:
          type: string
          format: date
        lightPoints:
          type: integer
          format: int32
      required:
        - rfqNumber
        - renovationCompanyContact
        - site
        - items
        - estimatedStartDate
        - lightPoints
    ContactInformation:
      title: ContactInformation
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
      required:
        - name
        - address
        - emailAddress
    Site:
      title: Site
      type: object
      properties:
        address:
          type: string
        squareMeters:
          type: number
          format: float
          minimum: 0
        constructionYear:
          type: string
      required:
        - address
        - squareMeters
    QuotationItem:
      title: QuotationItem
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
    Quotation:
      title: Quotation
      type: object
      properties:
        pricedItems:
          type: array
          items:
            $ref: '#/components/schemas/QuotationPricedItem'
        status:
          type: string
          enum:
            - READY
            - CANCELLED
      required:
        - status
    QuotationPricedItem:
      title: QuotationPricedItem
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
      required:
        - title
        - price
    Project:
      title: Project
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        startDate:
          type: string
          format: date
        rfqNumber:
          type: string
        links:
          type: object
          required:
            - projectStatus
            - planProposals
          properties:
            projectStatus:
              type: string
              format: uri
            planProposals:
              type: string
              format: uri
          readOnly: true
      required:
        - id
        - name
        - startDate
        - rfqNumber
        - links
    ProjectStatus:
      title: ProjectStatus
      type: object
      properties:
        status:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
        links:
          type: object
          required:
            - project
          properties:
            project:
              type: string
              format: uri
          readOnly: true
      required:
        - status
        - links
    Job:
      title: Job
      type: object
      properties:
        id:
          type: string
          readOnly: true
        title:
          type: string
        description:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
        numberOfRequiredElectricians:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
            - FAILED
      required:
        - id
        - title
        - description
        - startDateTime
        - endDateTime
        - numberOfRequiredElectricians
        - status
    JobProposal:
      title: JobProposal
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
      required:
        - title
        - description
        - startDateTime
        - endDateTime
    PlanProposal:
      title: PlanProposal
      type: object
      properties:
        id:
          type: string
          readOnly: true
        jobProposals:
          type: array
          items:
            $ref: '#/components/schemas/JobProposal'
        links:
          type: object
          required:
            - status
            - project
          properties:
            status:
              type: string
              format: uri
            project:
              type: string
              format: uri
          readOnly: true
      required:
        - id
        - jobProposals
        - links
    PlanProposalStatus:
      title: PlanProposalStatus
      type: object
      properties:
        status:
          type: string
          enum:
            - ACCEPTED
            - DECLINED
        links:
          type: object
          required:
            - planProposal
          properties:
            planProposal:
              type: string
              format: uri
          readOnly: true
      required:
        - status
        - links
